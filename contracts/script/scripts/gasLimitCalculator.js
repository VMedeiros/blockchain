/**
 * Gas Limit Calculator for BBRLPlus Contract
 * 
 * Este script utiliza os m√©todos recomendados do Ethers.js v5 para estimativa de gas:
 * 
 * 1. contract.callStatic.methodName() - Pr√©-verifica√ß√£o para validar se a transa√ß√£o pode ser executada
 * 2. contract.estimateGas.methodName() - M√©todo principal para estimativa de gas (recomendado)
 * 3. contract.populateTransaction.methodName() + provider.estimateGas() - M√©todo alternativo
 * 4. Estimativa baseada em padr√µes t√≠picos - Fallback final
 * 
 * Refer√™ncia: https://docs.ethers.org/v5/api/contract/example/#erc20-meta-methods
 * 
 * @author AuthBank Team
 * @version 2.0.0 - Atualizado com padr√µes Ethers.js v5
 */

import { ethers } from 'ethers';
import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
dotenv.config();

// Obter o diret√≥rio atual para resolver o caminho do ABI
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Carregar o ABI completo do arquivo JSON
const abiPath = path.join(__dirname, '..', 'abi', 'BBRLPlus.json');
const BBRL_PLUS_ABI = JSON.parse(fs.readFileSync(abiPath, 'utf8'));

async function estimateGasForMintRef() {
    try {
        // Configurar provider usando BSC_NODE_URL do .env
        const provider = new ethers.JsonRpcProvider(process.env.BSC_NODE_URL);

        // Endere√ßo do contrato do .env
        const contractAddress = process.env.BSC_CONTRACT_ADDRESS;

        // Tentar carregar wallet minter (opcional)
        let contract;

        const minterKeystorePath = './wallets/minter-0xE4055E9875087ee2a6d93Fd6268d12e4Bd6551B3.keystore.json';
        const keystoreJson = fs.readFileSync(minterKeystorePath, 'utf8');
        const wallet = await ethers.Wallet.fromEncryptedJson(keystoreJson, process.env.WALLET_PASSWORD);
        const connectedWallet = wallet.connect(provider);
        console.log(connectedWallet.address, "üîë Wallet minter carregada");

        // Criar inst√¢ncia do contrato conectada com a wallet minter        
        contract = new ethers.Contract(contractAddress, BBRL_PLUS_ABI, connectedWallet);
        console.log("üîê Contrato conectado com a wallet minter");


        // Par√¢metros de exemplo para estimativa
        const sampleParams = {
            to: "0x1cc0fa6105f1d74E0D8fa57b3D83201F4712a071", // Endere√ßo de exemplo
            amount: ethers.parseUnits("1000", 18), // 1000 tokens (assumindo 18 decimais)
            ref: "GAS_ESTIMATION_TEST" // Refer√™ncia de teste
        };      

        console.log("üîó Conectando √† BSC...");
        console.log(`üìã Contrato: ${contractAddress}`);
        console.log(`üåê RPC: ${process.env.BSC_NODE_URL}`);
        console.log("");

        console.log("‚öôÔ∏è  Par√¢metros para estimativa:");
        console.log(`   to: ${sampleParams.to}`);
        console.log(`   amount: ${ethers.formatUnits(sampleParams.amount, 18)} tokens`);
        console.log(`   ref: "${sampleParams.ref}"`);
        console.log("");

        // Verificar se o contrato existe e tem as fun√ß√µes b√°sicas
        console.log("üîç Verificando contrato...");
        try {
            const [name, symbol, decimals] = await Promise.all([
                contract.name(),
                contract.symbol(), 
                contract.decimals()
            ]);
            console.log(`‚úÖ Contrato v√°lido: ${name} (${symbol}) - ${decimals} decimais`);
        } catch (contractError) {
            console.error('‚ùå Erro ao verificar contrato:', contractError.message);
            console.error('üí° O contrato pode n√£o estar implantado no endere√ßo especificado');
            throw contractError;
        }

        // Verificar se a carteira tem role de minter
        console.log("üîê Verificando permiss√µes...");
        try {
            const minterRole = ethers.keccak256(ethers.toUtf8Bytes('MINTER_ROLE'));
            const hasRole = await contract.hasRole(minterRole, connectedWallet.address);
            
            if (!hasRole) {
                console.error('‚ùå A carteira n√£o possui role de MINTER');
                console.error(`   Carteira: ${connectedWallet.address}`);
                throw new Error('Wallet n√£o possui permiss√£o MINTER_ROLE');
            }
            
            console.log('‚úÖ Carteira possui role de MINTER');
        } catch (roleError) {
            console.error('‚ùå Erro ao verificar role de minter:', roleError.message);
            throw roleError;
        }

        // Verificar se o contrato est√° pausado
        console.log("‚è∏Ô∏è  Verificando se o contrato est√° pausado...");
        try {
            const isPaused = await contract.paused();
            if (isPaused) {
                console.error('‚ùå O contrato est√° pausado');
                throw new Error('Contrato est√° pausado, n√£o √© poss√≠vel mintar tokens');
            }
            console.log('‚úÖ Contrato n√£o est√° pausado');
        } catch (pauseError) {
            if (pauseError.message.includes('pausado')) {
                throw pauseError;
            }
            console.log('‚ö†Ô∏è  N√£o foi poss√≠vel verificar se o contrato est√° pausado (fun√ß√£o pode n√£o existir)');
        }

        // Estimar gas para o m√©todo mintRef
        console.log("‚è≥ Estimando gas...");

        // Primeiro, validar se a transa√ß√£o pode ser executada (pre-flight check)
        let gasEstimate;
        try {
            gasEstimate = await contract.mintRef.estimateGas(sampleParams.to, sampleParams.amount, sampleParams.ref);
        } catch (error) {
            console.error('‚ùå Erro ao estimar gas:', error.message);
            
            // Adicionar mais detalhes sobre o erro
            if (error.code === 'BUFFER_OVERRUN') {
                console.error('üí° Este erro pode indicar que:');
                console.error('   - A fun√ß√£o mintRef n√£o existe no contrato');
                console.error('   - O contrato est√° pausado');
                console.error('   - H√° problemas com os par√¢metros fornecidos');
                console.error('   - O endere√ßo de destino √© inv√°lido');
            }
            
            throw error;
        }

        console.log("‚úÖ Estimativa conclu√≠da!");
        console.log("");
        console.log("üìä Resultados:");
        console.log(`   Estimated Gas: ${gasEstimate.toString()}`);
        console.log(`   Gas Limit Recomendado: ${(gasEstimate * 120n / 100n).toString()} (com 20% buffer)`);
        console.log(`   Gas Limit Conservador: ${(gasEstimate * 150n / 100n).toString()} (com 50% buffer)`);

        // Adicionar informa√ß√µes sobre custos estimados em BNB
        try {
            let gasPrice;
            let gasPriceSource = "network";

            try {
                gasPrice = await provider.getGasPrice();
                console.log(`\nüì° Gas price obtido da rede: ${ethers.formatUnits(gasPrice, 'gwei')} Gwei`);
            } catch (gasPriceError) {
                // Fallback: usar gas price t√≠pico da BSC (5 Gwei)
                gasPrice = ethers.parseUnits("5", "gwei");
                gasPriceSource = "fallback";
                console.log(`\nüí° Usando gas price padr√£o da BSC: ${ethers.formatUnits(gasPrice, 'gwei')} Gwei`);
            }

            const costInWei = gasEstimate * gasPrice;
            const costInBNB = ethers.formatEther(costInWei);
            const costWithBufferInWei = (gasEstimate * 120n / 100n) * gasPrice;
            const costWithBufferInBNB = ethers.formatEther(costWithBufferInWei);
            const costConservativeInWei = (gasEstimate * 150n / 100n) * gasPrice;
            const costConservativeInBNB = ethers.formatEther(costConservativeInWei);

            console.log("");
            console.log("üí∞ Custo Estimado:");
            console.log(`   Gas Price (${gasPriceSource}): ${ethers.formatUnits(gasPrice, 'gwei')} Gwei`);
            console.log(`   Custo Base: ~${parseFloat(costInBNB).toFixed(6)} BNB`);
            console.log(`   Custo c/ Buffer 20%: ~${parseFloat(costWithBufferInBNB).toFixed(6)} BNB`);
            console.log(`   Custo Conservador 50%: ~${parseFloat(costConservativeInBNB).toFixed(6)} BNB`);

           
        } catch (error) {
            console.log(`\n‚ö†Ô∏è  Erro ao calcular custos estimados: ${error.message}`);
        }

        // Preparar resultado estruturado para retorno
        const gasEstimationResult = {
            success: true,
            estimatedGas: gasEstimate.toString(),
            recommendedGasLimit: (gasEstimate * 120n / 100n).toString(),
            conservativeGasLimit: (gasEstimate * 150n / 100n).toString(),
            canExecute: true, // Se chegou at√© aqui, a transa√ß√£o pode ser executada
            timestamp: new Date().toISOString(),
            method: 'mintRef',
            parameters: {
                to: sampleParams.to,
                amount: ethers.formatUnits(sampleParams.amount, 18),
                ref: sampleParams.ref
            }
        };

        return gasEstimationResult;

    } catch (error) {
        console.error("‚ùå Erro ao estimar gas:", error.message);

        // Tratamento espec√≠fico de erros baseado nos tipos do Ethers.js v5
        if (error.code === 'NETWORK_ERROR' || error.message.includes("could not detect network")) {
            console.error("üåê Erro de rede detectado");
            console.error("üí° Verifique se BSC_NODE_URL est√° correto no arquivo .env");
            console.error("üí° Verifique sua conex√£o com a internet");
        } else if (error.code === 'INVALID_ARGUMENT' || error.message.includes("invalid address")) {
            console.error("üìù Argumento inv√°lido detectado");
            console.error("üí° Verifique se BSC_CONTRACT_ADDRESS est√° correto no arquivo .env");
            console.error("üí° Verifique se os endere√ßos t√™m o formato correto (checksum)");
        } else if (error.code === 'CALL_EXCEPTION') {
            console.error("üîß Erro na chamada do contrato");
            console.error(`üí° Raz√£o: ${error.reason || 'N√£o especificada'}`);
            console.error("üí° O contrato pode n√£o estar implantado no endere√ßo especificado");
            console.error("üí° Ou a fun√ß√£o mintRef pode n√£o existir com os par√¢metros fornecidos");
        } else if (error.code === 'INSUFFICIENT_FUNDS') {
            console.error("üí∞ Fundos insuficientes");
            console.error("üí° A wallet n√£o tem BNB suficiente para executar a transa√ß√£o");
        } else if (error.code === 'UNPREDICTABLE_GAS_LIMIT') {
            console.error("‚ö° N√£o foi poss√≠vel prever o limite de gas");
            console.error("üí° A transa√ß√£o pode falhar por raz√µes de l√≥gica de neg√≥cio");
            console.error("üí° Verifique se a wallet tem permiss√£o MINTER_ROLE");
        } else {
            console.error("‚ùì Erro n√£o categorizado");
            console.error(`üí° C√≥digo do erro: ${error.code || 'N/A'}`);
            console.error(`üí° Dados adicionais: ${error.data || 'N/A'}`);
        }

        console.error("\nüîç Para mais detalhes, execute com vari√°vel de ambiente DEBUG=ethers*");
        console.error("   Exemplo: DEBUG=ethers* node gasLimitCalculator.js");

        process.exit(1);
    }
}

async function estimateGasForTransferWithRef() {
    try {
        // Configurar provider usando BSC_NODE_URL do .env
        const provider = new ethers.JsonRpcProvider(process.env.BSC_NODE_URL);

        // Endere√ßo do contrato do .env
        const contractAddress = process.env.BSC_CONTRACT_ADDRESS;

        // Carregar wallet para transfer√™ncia (precisa ter tokens)
        let contract;

        const walletKeystorePath = './wallets/minter-0xE4055E9875087ee2a6d93Fd6268d12e4Bd6551B3.keystore.json';
        const keystoreJson = fs.readFileSync(walletKeystorePath, 'utf8');
        const wallet = await ethers.Wallet.fromEncryptedJson(keystoreJson, process.env.WALLET_PASSWORD);
        const connectedWallet = wallet.connect(provider);
        console.log(connectedWallet.address, "üîë Wallet carregada");

        // Criar inst√¢ncia do contrato conectada com a wallet        
        contract = new ethers.Contract(contractAddress, BBRL_PLUS_ABI, connectedWallet);
        console.log("üîê Contrato conectado com a wallet");


        // Par√¢metros de exemplo para estimativa
        const sampleParams = {
            to: "0x1cc0fa6105f1d74E0D8fa57b3D83201F4712a071", // Endere√ßo de exemplo
            amount: ethers.parseUnits("1000", 18), // 1000 tokens (assumindo 18 decimais)
            ref: "GAS_ESTIMATION_TEST" // Refer√™ncia de teste
        };      

        console.log("üîó Conectando √† BSC...");
        console.log(`üìã Contrato: ${contractAddress}`);
        console.log(`üåê RPC: ${process.env.BSC_NODE_URL}`);
        console.log("");

        console.log("‚öôÔ∏è  Par√¢metros para estimativa:");
        console.log(`   to: ${sampleParams.to}`);
        console.log(`   amount: ${ethers.formatUnits(sampleParams.amount, 18)} tokens`);
        console.log(`   ref: "${sampleParams.ref}"`);
        console.log("");

        // Verificar se o contrato existe e tem as fun√ß√µes b√°sicas
        console.log("üîç Verificando contrato...");
        try {
            const [name, symbol, decimals] = await Promise.all([
                contract.name(),
                contract.symbol(), 
                contract.decimals()
            ]);
            console.log(`‚úÖ Contrato v√°lido: ${name} (${symbol}) - ${decimals} decimais`);
        } catch (contractError) {
            console.error('‚ùå Erro ao verificar contrato:', contractError.message);
            console.error('üí° O contrato pode n√£o estar implantado no endere√ßo especificado');
            throw contractError;
        }

        // Verificar se a carteira tem saldo suficiente
        console.log("ÔøΩ Verificando saldo da carteira...");
        try {
            const balance = await contract.balanceOf(connectedWallet.address);
            const balanceFormatted = ethers.formatUnits(balance, 18);
            const requiredAmount = ethers.formatUnits(sampleParams.amount, 18);
            
            console.log(`   Saldo atual: ${balanceFormatted} tokens`);
            console.log(`   Quantidade para transferir: ${requiredAmount} tokens`);
            
            if (balance < sampleParams.amount) {
                console.error('‚ùå A carteira n√£o possui saldo suficiente');
                console.error(`   Carteira: ${connectedWallet.address}`);
                console.error(`   Saldo atual: ${balanceFormatted} tokens`);
                console.error(`   Necess√°rio: ${requiredAmount} tokens`);
                throw new Error('Wallet n√£o possui saldo suficiente para a transfer√™ncia');
            }
            
            console.log('‚úÖ Carteira possui saldo suficiente');
        } catch (balanceError) {
            if (balanceError.message.includes('saldo suficiente')) {
                throw balanceError;
            }
            console.error('‚ùå Erro ao verificar saldo da carteira:', balanceError.message);
            throw balanceError;
        }

        // Verificar se o contrato est√° pausado
        console.log("‚è∏Ô∏è  Verificando se o contrato est√° pausado...");
        try {
            const isPaused = await contract.paused();
            if (isPaused) {
                console.error('‚ùå O contrato est√° pausado');
                throw new Error('Contrato est√° pausado, n√£o √© poss√≠vel transferir tokens');
            }
            console.log('‚úÖ Contrato n√£o est√° pausado');
        } catch (pauseError) {
            if (pauseError.message.includes('pausado')) {
                throw pauseError;
            }
            console.log('‚ö†Ô∏è  N√£o foi poss√≠vel verificar se o contrato est√° pausado (fun√ß√£o pode n√£o existir)');
        }

        // Estimar gas para o m√©todo transferWithRef
        console.log("‚è≥ Estimando gas...");

        // Primeiro, validar se a transa√ß√£o pode ser executada (pre-flight check)
        let gasEstimate;
        try {
            gasEstimate = await contract.transferWithRef.estimateGas(sampleParams.to, sampleParams.amount, sampleParams.ref);
        } catch (error) {
            console.error('‚ùå Erro ao estimar gas:', error.message);
            
            // Adicionar mais detalhes sobre o erro
            if (error.code === 'BUFFER_OVERRUN') {
                console.error('üí° Este erro pode indicar que:');
                console.error('   - A fun√ß√£o transferWithRef n√£o existe no contrato');
                console.error('   - O contrato est√° pausado');
                console.error('   - H√° problemas com os par√¢metros fornecidos');
                console.error('   - O endere√ßo de destino √© inv√°lido');
                console.error('   - A carteira n√£o possui saldo suficiente');
            }
            
            throw error;
        }

        console.log("‚úÖ Estimativa conclu√≠da!");
        console.log("");
        console.log("üìä Resultados:");
        console.log(`   Estimated Gas: ${gasEstimate.toString()}`);
        console.log(`   Gas Limit Recomendado: ${(gasEstimate * 120n / 100n).toString()} (com 20% buffer)`);
        console.log(`   Gas Limit Conservador: ${(gasEstimate * 150n / 100n).toString()} (com 50% buffer)`);

        // Adicionar informa√ß√µes sobre custos estimados em BNB
        try {
            let gasPrice;
            let gasPriceSource = "network";

            try {
                gasPrice = await provider.getGasPrice();
                console.log(`\nüì° Gas price obtido da rede: ${ethers.formatUnits(gasPrice, 'gwei')} Gwei`);
            } catch (gasPriceError) {
                // Fallback: usar gas price t√≠pico da BSC (5 Gwei)
                gasPrice = ethers.parseUnits("5", "gwei");
                gasPriceSource = "fallback";
                console.log(`\nüí° Usando gas price padr√£o da BSC: ${ethers.formatUnits(gasPrice, 'gwei')} Gwei`);
            }

            const costInWei = gasEstimate * gasPrice;
            const costInBNB = ethers.formatEther(costInWei);
            const costWithBufferInWei = (gasEstimate * 120n / 100n) * gasPrice;
            const costWithBufferInBNB = ethers.formatEther(costWithBufferInWei);
            const costConservativeInWei = (gasEstimate * 150n / 100n) * gasPrice;
            const costConservativeInBNB = ethers.formatEther(costConservativeInWei);

            console.log("");
            console.log("üí∞ Custo Estimado:");
            console.log(`   Gas Price (${gasPriceSource}): ${ethers.formatUnits(gasPrice, 'gwei')} Gwei`);
            console.log(`   Custo Base: ~${parseFloat(costInBNB).toFixed(6)} BNB`);
            console.log(`   Custo c/ Buffer 20%: ~${parseFloat(costWithBufferInBNB).toFixed(6)} BNB`);
            console.log(`   Custo Conservador 50%: ~${parseFloat(costConservativeInBNB).toFixed(6)} BNB`);

           
        } catch (error) {
            console.log(`\n‚ö†Ô∏è  Erro ao calcular custos estimados: ${error.message}`);
        }

        // Preparar resultado estruturado para retorno
        const gasEstimationResult = {
            success: true,
            estimatedGas: gasEstimate.toString(),
            recommendedGasLimit: (gasEstimate * 120n / 100n).toString(),
            conservativeGasLimit: (gasEstimate * 150n / 100n).toString(),
            canExecute: true, // Se chegou at√© aqui, a transa√ß√£o pode ser executada
            timestamp: new Date().toISOString(),
            method: 'transferWithRef',
            parameters: {
                to: sampleParams.to,
                amount: ethers.formatUnits(sampleParams.amount, 18),
                ref: sampleParams.ref
            }
        };

        return gasEstimationResult;

    } catch (error) {
        console.error("‚ùå Erro ao estimar gas:", error.message);

        // Tratamento espec√≠fico de erros baseado nos tipos do Ethers.js v5
        if (error.code === 'NETWORK_ERROR' || error.message.includes("could not detect network")) {
            console.error("üåê Erro de rede detectado");
            console.error("üí° Verifique se BSC_NODE_URL est√° correto no arquivo .env");
            console.error("üí° Verifique sua conex√£o com a internet");
        } else if (error.code === 'INVALID_ARGUMENT' || error.message.includes("invalid address")) {
            console.error("üìù Argumento inv√°lido detectado");
            console.error("üí° Verifique se BSC_CONTRACT_ADDRESS est√° correto no arquivo .env");
            console.error("üí° Verifique se os endere√ßos t√™m o formato correto (checksum)");
        } else if (error.code === 'CALL_EXCEPTION') {
            console.error("üîß Erro na chamada do contrato");
            console.error(`üí° Raz√£o: ${error.reason || 'N√£o especificada'}`);
            console.error("üí° O contrato pode n√£o estar implantado no endere√ßo especificado");
            console.error("üí° Ou a fun√ß√£o transferWithRef pode n√£o existir com os par√¢metros fornecidos");
        } else if (error.code === 'INSUFFICIENT_FUNDS') {
            console.error("üí∞ Fundos insuficientes");
            console.error("üí° A wallet n√£o tem BNB suficiente para executar a transa√ß√£o");
        } else if (error.code === 'UNPREDICTABLE_GAS_LIMIT') {
            console.error("‚ö° N√£o foi poss√≠vel prever o limite de gas");
            console.error("üí° A transa√ß√£o pode falhar por raz√µes de l√≥gica de neg√≥cio");
            console.error("üí° Verifique se a wallet tem saldo suficiente para a transfer√™ncia");
        } else {
            console.error("‚ùì Erro n√£o categorizado");
            console.error(`üí° C√≥digo do erro: ${error.code || 'N/A'}`);
            console.error(`üí° Dados adicionais: ${error.data || 'N/A'}`);
        }

        console.error("\nüîç Para mais detalhes, execute com vari√°vel de ambiente DEBUG=ethers*");
        console.error("   Exemplo: DEBUG=ethers* node gasLimitCalculator.js");

        process.exit(1);
    }
}

// Executar se for chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
    estimateGasForMintRef()
        .then(() => {
            console.log("\nüéâ Script executado com sucesso!");
            process.exit(0);
        })
        .catch(error => {
            console.error("üí• Erro fatal:", error);
            process.exit(1);
        });
}

export { estimateGasForMintRef, estimateGasForTransferWithRef };