/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface RewardDistributorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "OPERATOR_ROLE"
      | "addParticipant"
      | "autoTrigger"
      | "blockInterval"
      | "canTrigger"
      | "getParticipants"
      | "getParticipantsCount"
      | "getRoleAdmin"
      | "grantOperator"
      | "grantRole"
      | "hasRole"
      | "lastTriggerBlock"
      | "manualTrigger"
      | "maxParticipants"
      | "nextTriggerBlock"
      | "participantsCount"
      | "pause"
      | "paused"
      | "previewAllRewards"
      | "previewUserReward"
      | "removeParticipant"
      | "renounceRole"
      | "revokeRole"
      | "rewardPercentBps"
      | "setBlockInterval"
      | "setMaxParticipants"
      | "setRewardPercentBps"
      | "setTokens"
      | "supportsInterface"
      | "tokenA"
      | "tokenB"
      | "triggerIfInterval"
      | "triggerManual"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BlockIntervalUpdated"
      | "MaxParticipantsUpdated"
      | "ParticipantAdded"
      | "ParticipantRemoved"
      | "Paused"
      | "PercentUpdated"
      | "RewardPaid"
      | "RewardTriggered"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TokensConfigured"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addParticipant",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "autoTrigger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blockInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canTrigger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipantsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTriggerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "manualTrigger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxParticipants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextTriggerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "participantsCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "previewAllRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previewUserReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeParticipant",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPercentBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBlockInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxParticipants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardPercentBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokens",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "tokenA", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "triggerIfInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "triggerManual",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "autoTrigger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canTrigger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipantsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTriggerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manualTrigger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextTriggerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participantsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previewAllRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewUserReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardPercentBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlockInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardPercentBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "triggerIfInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerManual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace BlockIntervalUpdatedEvent {
  export type InputTuple = [oldValue: BigNumberish, newValue: BigNumberish];
  export type OutputTuple = [oldValue: bigint, newValue: bigint];
  export interface OutputObject {
    oldValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxParticipantsUpdatedEvent {
  export type InputTuple = [oldValue: BigNumberish, newValue: BigNumberish];
  export type OutputTuple = [oldValue: bigint, newValue: bigint];
  export interface OutputObject {
    oldValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ParticipantAddedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ParticipantRemovedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [by: AddressLike];
  export type OutputTuple = [by: string];
  export interface OutputObject {
    by: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PercentUpdatedEvent {
  export type InputTuple = [oldValue: BigNumberish, newValue: BigNumberish];
  export type OutputTuple = [oldValue: bigint, newValue: bigint];
  export interface OutputObject {
    oldValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardPaidEvent {
  export type InputTuple = [
    account: AddressLike,
    balanceA: BigNumberish,
    rewardAmount: BigNumberish,
    percentBps: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    balanceA: bigint,
    rewardAmount: bigint,
    percentBps: bigint
  ];
  export interface OutputObject {
    account: string;
    balanceA: bigint;
    rewardAmount: bigint;
    percentBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardTriggeredEvent {
  export type InputTuple = [
    blockNumber: BigNumberish,
    percentBps: BigNumberish,
    participantsCount: BigNumberish
  ];
  export type OutputTuple = [
    blockNumber: bigint,
    percentBps: bigint,
    participantsCount: bigint
  ];
  export interface OutputObject {
    blockNumber: bigint;
    percentBps: bigint;
    participantsCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensConfiguredEvent {
  export type InputTuple = [tokenA: AddressLike, tokenB: AddressLike];
  export type OutputTuple = [tokenA: string, tokenB: string];
  export interface OutputObject {
    tokenA: string;
    tokenB: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [by: AddressLike];
  export type OutputTuple = [by: string];
  export interface OutputObject {
    by: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RewardDistributor extends BaseContract {
  connect(runner?: ContractRunner | null): RewardDistributor;
  waitForDeployment(): Promise<this>;

  interface: RewardDistributorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  addParticipant: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  autoTrigger: TypedContractMethod<[], [void], "nonpayable">;

  blockInterval: TypedContractMethod<[], [bigint], "view">;

  canTrigger: TypedContractMethod<[], [boolean], "view">;

  getParticipants: TypedContractMethod<[], [string[]], "view">;

  getParticipantsCount: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantOperator: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  lastTriggerBlock: TypedContractMethod<[], [bigint], "view">;

  manualTrigger: TypedContractMethod<[], [void], "nonpayable">;

  maxParticipants: TypedContractMethod<[], [bigint], "view">;

  nextTriggerBlock: TypedContractMethod<[], [bigint], "view">;

  participantsCount: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  previewAllRewards: TypedContractMethod<
    [],
    [[string[], bigint[]] & { accounts: string[]; rewards: bigint[] }],
    "view"
  >;

  previewUserReward: TypedContractMethod<
    [user: AddressLike],
    [[bigint, bigint] & { balanceA: bigint; rewardAmount: bigint }],
    "view"
  >;

  removeParticipant: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  rewardPercentBps: TypedContractMethod<[], [bigint], "view">;

  setBlockInterval: TypedContractMethod<
    [newInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxParticipants: TypedContractMethod<
    [newMax: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRewardPercentBps: TypedContractMethod<
    [newPercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokens: TypedContractMethod<
    [_tokenA: AddressLike, _tokenB: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenA: TypedContractMethod<[], [string], "view">;

  tokenB: TypedContractMethod<[], [string], "view">;

  triggerIfInterval: TypedContractMethod<[], [void], "nonpayable">;

  triggerManual: TypedContractMethod<[], [void], "nonpayable">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addParticipant"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "autoTrigger"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "blockInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "canTrigger"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getParticipants"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getParticipantsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantOperator"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastTriggerBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "manualTrigger"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "maxParticipants"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextTriggerBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "participantsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "previewAllRewards"
  ): TypedContractMethod<
    [],
    [[string[], bigint[]] & { accounts: string[]; rewards: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "previewUserReward"
  ): TypedContractMethod<
    [user: AddressLike],
    [[bigint, bigint] & { balanceA: bigint; rewardAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeParticipant"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardPercentBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setBlockInterval"
  ): TypedContractMethod<[newInterval: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxParticipants"
  ): TypedContractMethod<[newMax: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRewardPercentBps"
  ): TypedContractMethod<[newPercent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokens"
  ): TypedContractMethod<
    [_tokenA: AddressLike, _tokenB: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenA"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenB"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "triggerIfInterval"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "triggerManual"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BlockIntervalUpdated"
  ): TypedContractEvent<
    BlockIntervalUpdatedEvent.InputTuple,
    BlockIntervalUpdatedEvent.OutputTuple,
    BlockIntervalUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MaxParticipantsUpdated"
  ): TypedContractEvent<
    MaxParticipantsUpdatedEvent.InputTuple,
    MaxParticipantsUpdatedEvent.OutputTuple,
    MaxParticipantsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ParticipantAdded"
  ): TypedContractEvent<
    ParticipantAddedEvent.InputTuple,
    ParticipantAddedEvent.OutputTuple,
    ParticipantAddedEvent.OutputObject
  >;
  getEvent(
    key: "ParticipantRemoved"
  ): TypedContractEvent<
    ParticipantRemovedEvent.InputTuple,
    ParticipantRemovedEvent.OutputTuple,
    ParticipantRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PercentUpdated"
  ): TypedContractEvent<
    PercentUpdatedEvent.InputTuple,
    PercentUpdatedEvent.OutputTuple,
    PercentUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RewardPaid"
  ): TypedContractEvent<
    RewardPaidEvent.InputTuple,
    RewardPaidEvent.OutputTuple,
    RewardPaidEvent.OutputObject
  >;
  getEvent(
    key: "RewardTriggered"
  ): TypedContractEvent<
    RewardTriggeredEvent.InputTuple,
    RewardTriggeredEvent.OutputTuple,
    RewardTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TokensConfigured"
  ): TypedContractEvent<
    TokensConfiguredEvent.InputTuple,
    TokensConfiguredEvent.OutputTuple,
    TokensConfiguredEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "BlockIntervalUpdated(uint256,uint256)": TypedContractEvent<
      BlockIntervalUpdatedEvent.InputTuple,
      BlockIntervalUpdatedEvent.OutputTuple,
      BlockIntervalUpdatedEvent.OutputObject
    >;
    BlockIntervalUpdated: TypedContractEvent<
      BlockIntervalUpdatedEvent.InputTuple,
      BlockIntervalUpdatedEvent.OutputTuple,
      BlockIntervalUpdatedEvent.OutputObject
    >;

    "MaxParticipantsUpdated(uint256,uint256)": TypedContractEvent<
      MaxParticipantsUpdatedEvent.InputTuple,
      MaxParticipantsUpdatedEvent.OutputTuple,
      MaxParticipantsUpdatedEvent.OutputObject
    >;
    MaxParticipantsUpdated: TypedContractEvent<
      MaxParticipantsUpdatedEvent.InputTuple,
      MaxParticipantsUpdatedEvent.OutputTuple,
      MaxParticipantsUpdatedEvent.OutputObject
    >;

    "ParticipantAdded(address)": TypedContractEvent<
      ParticipantAddedEvent.InputTuple,
      ParticipantAddedEvent.OutputTuple,
      ParticipantAddedEvent.OutputObject
    >;
    ParticipantAdded: TypedContractEvent<
      ParticipantAddedEvent.InputTuple,
      ParticipantAddedEvent.OutputTuple,
      ParticipantAddedEvent.OutputObject
    >;

    "ParticipantRemoved(address)": TypedContractEvent<
      ParticipantRemovedEvent.InputTuple,
      ParticipantRemovedEvent.OutputTuple,
      ParticipantRemovedEvent.OutputObject
    >;
    ParticipantRemoved: TypedContractEvent<
      ParticipantRemovedEvent.InputTuple,
      ParticipantRemovedEvent.OutputTuple,
      ParticipantRemovedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PercentUpdated(uint16,uint16)": TypedContractEvent<
      PercentUpdatedEvent.InputTuple,
      PercentUpdatedEvent.OutputTuple,
      PercentUpdatedEvent.OutputObject
    >;
    PercentUpdated: TypedContractEvent<
      PercentUpdatedEvent.InputTuple,
      PercentUpdatedEvent.OutputTuple,
      PercentUpdatedEvent.OutputObject
    >;

    "RewardPaid(address,uint256,uint256,uint16)": TypedContractEvent<
      RewardPaidEvent.InputTuple,
      RewardPaidEvent.OutputTuple,
      RewardPaidEvent.OutputObject
    >;
    RewardPaid: TypedContractEvent<
      RewardPaidEvent.InputTuple,
      RewardPaidEvent.OutputTuple,
      RewardPaidEvent.OutputObject
    >;

    "RewardTriggered(uint256,uint256,uint256)": TypedContractEvent<
      RewardTriggeredEvent.InputTuple,
      RewardTriggeredEvent.OutputTuple,
      RewardTriggeredEvent.OutputObject
    >;
    RewardTriggered: TypedContractEvent<
      RewardTriggeredEvent.InputTuple,
      RewardTriggeredEvent.OutputTuple,
      RewardTriggeredEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TokensConfigured(address,address)": TypedContractEvent<
      TokensConfiguredEvent.InputTuple,
      TokensConfiguredEvent.OutputTuple,
      TokensConfiguredEvent.OutputObject
    >;
    TokensConfigured: TypedContractEvent<
      TokensConfiguredEvent.InputTuple,
      TokensConfiguredEvent.OutputTuple,
      TokensConfiguredEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
